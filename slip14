Q. 1) Create TEACHER table as follows TEACHER(tno, tname, qualification, salary). Write Ajax
      program to select a teachers name and print the selected teachers details 

CREATE TABLE TEACHER (
  tno SERIAL PRIMARY KEY,
  tname VARCHAR(50),
  qualification VARCHAR(50),
  salary NUMERIC
);

INSERT INTO TEACHER (tname, qualification, salary) VALUES
('Prof. Mehta', 'MCA', 45000),
('Prof. Sharma', 'PhD', 60000),
('Prof. Patil', 'MSc', 40000);



//index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>
select name:
  <select id="name" onchange="getDetails()">
      <option value="">-- Select a teacher --</option>
      <option value="onkar">onkar</option>
  </select>
  <h3> Details:</h3>
  <div id="Details"></div>
  <script>
    function getDetails(){
      const name=document.getElementById("name").value;
      const details=document.getElementById("Details");
      const xhr= new XMLHttpRequest();
      xhr.open("GET",`slip26.php?name=${name}`,true)
      xhr.onload=function()
      {
        if(xhr.status===200)
      {
          details.innerHTML=xhr.responseText
      }else{
        details.innerHTML="error"
      }
      }
      xhr.send();
    }
  </script>
</body>
</html>



//slip14.php

<?php
$conn = pg_connect("host=localhost dbname=employees user=onkar password=onkar123");
if (!$conn) {
    die("Connection failed: " . pg_last_error());
}
if(isset($_GET['name']))
{
$q="select * from teacher";
$rs=pg_query($q);
 while($r=pg_fetch_row($rs))
 {
  if($r[1]===$_GET['name'])
  {
    echo$r[0]." ".$r[1]." ".$r[2]."<br>";
    return;
  }
 }
 echo"enter wrong username and password";
}
?>







Q. 2)Create the following dataset in python & Convert the categorical values into numeric format.Apply 
      the apriori algorithm on the above dataset to generate the frequent itemsets and association rules. Repeat 
      the process with different min_sup values. 


import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

transactions = [
    ['Apple', 'Mango', 'Banana'],
    ['Mango', 'Banana', 'Cabbage', 'Carrots'],
    ['Mango', 'Banana', 'Carrots'],
    ['Mango', 'Carrots']
]

te = TransactionEncoder()
df = pd.DataFrame(te.fit_transform(transactions), columns=te.columns_)

min_sup_values = [0.2, 0.4, 0.6]

for min_sup in min_sup_values:
    print(f"\nMin Support: {min_sup}")
    freq_items = apriori(df, min_support=min_sup, use_colnames=True)
    rules = association_rules(freq_items, metric="lift", min_threshold=1)
    
    print("\nFrequent Itemsets:\n", freq_items)
    print("\nAssociation Rules:\n", rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']])
